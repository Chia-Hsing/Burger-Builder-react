{"version":3,"sources":["components/Order/Order/Order.js","containers/Orders/Orders.js","components/Order/Order/Order.module.css"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","key","style","textTransform","display","margin","border","padding","className","classes","Order","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios","module","exports"],"mappings":"gMAqCeA,EAjCD,SAAAC,GAEV,IAAMC,EAAa,GAEnB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAIlC,IAAMI,EAAmBL,EAAYM,KAAK,SAAAC,GACtC,OAAO,0BACPC,IAAQD,EAAGJ,KACXM,MAAS,CACLC,cAAc,aACdC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,QAEXP,EAAGJ,KATE,KASMI,EAAGH,OATT,QAYX,OACI,yBAAKW,UAAcC,IAAQC,OACvB,0CAAgBZ,GAChB,qCAAU,gCAAUN,EAAMmB,MAAMC,QAAQ,O,wCCvB9CC,E,kLAqBEC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAOF,KAAKtB,MAAMyB,U,+BAKtD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAeb,OAdKL,KAAKtB,MAAM4B,UACZF,EACI,6BACMJ,KAAKtB,MAAM0B,OAAOnB,KAAK,SAAAR,GAAK,OAC1B,kBAACmB,EAAD,CACAT,IAAQV,EAAM8B,GACd5B,YAAgBF,EAAME,YACtBkB,OAAWpB,EAAMoB,aAO1BO,M,GAzCMI,aA4DNC,uBAfS,SAAAC,GACpB,MAAO,CACHN,OAAQM,EAAMjC,MAAM2B,OACpBE,QAASI,EAAMjC,MAAM6B,QACrBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,WAGA,SAAAS,GACvB,MAAO,CACHX,cAAe,SAACC,EAAOC,GAAR,OAAmBS,EAASC,IAAoBX,EAAOC,QAK/DM,CAA6CK,YAAiBf,EAAQgB,O,mBCnErFC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/5.5c8b448f.chunk.js","sourcesContent":["import React from 'react'\nimport classes from './Order.module.css'\n\n\nconst order = props => {\n\n    const ingredients= []\n\n    for (let ingredientName in props.ingredients) {\n        ingredients.push({\n            name: ingredientName,\n            amount: props.ingredients[ingredientName]\n        })\n    }\n\n    const ingredientOutput = ingredients.map (ig => {\n        return <span \n        key = { ig.name }\n        style = {{\n            textTransform:'capitalize',\n            display: 'inline-block',\n            margin: '0 8px',\n            border: '1px solid #ccc',\n            padding: '5px'\n        }}\n        >{ig.name} ({ig.amount})</span>\n    })\n\n    return (\n        <div className = { classes.Order }>\n            <p>Ingredient: {ingredientOutput}</p>\n            <p>Price: <strong>{ props.price.toFixed(2) }</strong></p>\n         </div>\n    )\n}\n\n\nexport default order\n","import React, { Component } from 'react'\nimport Order from '../../components/Order/Order/Order'\nimport axios from '../../axios-orders'\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../components/UI/Spinner/Spinner'\n\nclass Orders extends Component {\n    // state = {\n    //     loading: true,\n    //     orders: []\n    // }\n\n    componentDidMount () {\n        // axios.get('/orders.json')\n        // .then(res => {\n        //     const fetchOrders = []\n        //     for (let key in res.data) {\n        //         fetchOrders.push({\n        //             ...res.data[key],\n        //             id: key\n        //         })\n        //     }\n        //     this.setState({loading: false, orders: fetchOrders})\n\n        // }).catch (err => {\n        //     this.setState({loading: false})\n        // })\n        this.props.onFetchOrders(this.props.token, this.props.userId)\n    }\n\n\n    render () {\n        let orders = <Spinner />\n        if (!this.props.loading) {\n            orders = (\n                <div>\n                    { this.props.orders.map( order => (\n                        <Order \n                        key = { order.id } \n                        ingredients = { order.ingredients }\n                        price = { +order.price }\n                        />\n                    ))}\n                 </div>\n            )\n\n        }\n        return orders\n    } \n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1XbSk\"};"],"sourceRoot":""}