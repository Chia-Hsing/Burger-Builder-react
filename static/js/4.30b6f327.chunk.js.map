{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","isRequired","isEmail","valid","touched","password","minlength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","SwitchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","changed","Invalid","shouldValidate","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.30b6f327.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport classes from './Auth.module.css'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport { Redirect } from 'react-router-dom'\nimport { updateObject, checkValidity } from '../../shared/utility'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                    minlength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup: true\n    }\n\n    componentDidMount () {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath()\n        } \n    }\n\n    inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = updateObject(this.state.controls, { \n            [controlName] : updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            })\n        })\n        this.setState({controls: updatedControls})\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    }\n\n    SwitchAuthModeHandler = () => {\n        this.setState( prevState => {\n          return { isSignup: !prevState.isSignup }\n        } )\n    }\n\n\n    render () {\n        let formElementArray = []\n\n        for ( let key in this.state.controls) {\n            formElementArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementArray.map( formElement => (\n            <Input \n            key = { formElement.id }\n            elementType = { formElement.config.elementType }\n            elementConfig = { formElement.config.elementConfig }\n            value = { formElement.config.value }\n            changed = { (event) => this.inputChangedHandler(event, formElement.id) }\n            Invalid = { !formElement.config.valid }\n            shouldValidate = { formElement.config.validation }\n            touched = { formElement.config.touched } \n            />\n        ))\n        \n        if ( this.props.loading ) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null\n\n        if ( this.props.error ) {\n            errorMessage = (\n                <p>{ this.props.error.message }</p>\n            )\n        }\n\n        let authRedirect = null\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={ this.props.authRedirectPath } />\n        }\n\n        return (\n            <div className = { classes.Auth }>\n                { authRedirect }\n                { errorMessage }\n                <form onSubmit = { this.submitHandler } >\n                    { form }\n                    <Button btnType = 'Success'>Submit</Button>\n                </form>\n                <Button \n                btnType = 'Danger'\n                clicked = { this.SwitchAuthModeHandler }\n                > Switch to { this.state.isSignup ? 'SIGNIN' : 'SIGNUP' }\n                </Button>\n            </div>   \n        )\n    } \n} \n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building ,\n        authRedirectPath: state.auth.authRedirectPath  \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth: ( email, password, isSignup ) => dispatch(actions.auth( email, password, isSignup )),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n\n\n","import React from 'react'\nimport classes from './Input.module.css'\n\n\nconst input = props => {\n\n    let inputElement = null\n    const inputClasses = [classes.InputElement]\n\n    if ( props.Invalid && props.shouldValidate && props.touched ) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ) :\n            inputElement = <input \n            className = { inputClasses.join(' ') } \n            value = { props.value }\n            { ...props.elementConfig } \n            onChange = { props.changed }/>\n            break\n        case ( 'textarea' ) :\n            inputElement = <textarea \n            className = { inputClasses.join(' ') }\n            value = { props.value } \n            { ...props.elementConfig } \n            onChange = { props.changed }/>\n            break   \n        case ( 'select' ) :\n            inputElement = (\n                <select\n                className = { inputClasses.join(' ') }\n                value = { props.value }\n                onChange = { props.changed }>\n                    { props.elementConfig.options.map(option => (\n                        <option \n                        value = { option.value }\n                        key = { option.value }>\n                            { option.displayValue }\n                        </option>\n                    )) }\n                </select>\n             )\n            break   \n        default : \n            inputElement = <input \n            className = { classes.InputElement }\n            value = { props.value } \n            { ...props.elementConfig } \n            onChange = { props.changed }/>\n        }   \n\n\n    return (\n        <div className = { classes.Input }>\n            <label className = {classes.Label}>{ props.label }</label>\n            { inputElement }\n        </div>\n    )\n}\n\n\nexport default input\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}