{"version":3,"sources":["components/Order/CheckOutSummary/CheckOutSummary.js","containers/CheckOut/ContactData/ContactData.js","containers/CheckOut/CheckOut.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckOutSummary/CheckOutSummary.module.css","containers/CheckOut/ContactData/ContactData.module.css"],"names":["checkOutSummary","props","className","classes","CheckOutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","isRequired","valid","touched","street","zipCode","minlength","maxlength","country","email","deliverMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onBurgerOrder","token","inputChangedHandler","identifer","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputIdentifier","setState","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","changed","Invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","CheckOut","checkoutCanceledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.f3f4bbee.chunk.js","sourcesContent":["import React from 'react'\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport classes from './CheckOutSummary.module.css'\n\nconst checkOutSummary = (props) => (\n    <div className={classes.CheckOutSummary}>\n        <h1>We hope it tastes well.</h1>\n        <div style={{width: '100%', margin: 'auto'}}>\n            <Burger ingredients={ props.ingredients }/>\n        </div>\n        <Button btnType = 'Danger' clicked = { props.checkoutCanceled }>Cancel</Button>\n        <Button btnType = 'Success' clicked = { props.checkoutContinued }>Continue</Button>\n    </div>\n)\n\nexport default checkOutSummary\n","import React, { Component } from 'react'\nimport Button from '../../../components/UI/Button/Button'\nimport classes from './ContactData.module.css'\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport Input from '../../../components/UI/Input/Input'\nimport { connect } from 'react-redux'\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index'\nimport { updateObject, checkValidity } from '../../../shared/utility'\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Zip Code',\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                    minlength: 5,\n                    maxlength: 5,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'E-mail',\n                },\n                value: '',\n                validation: {\n                    isRequired: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            deliverMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'fastest' },\n                        { value: 'cheapest', displayValue: 'cheapest' },\n                    ],\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            },\n        },\n        formIsValid: false,\n    }\n\n    //* press button, order complete\n    orderHandler = (event) => {\n        event.preventDefault()\n        let formData = {}\n        // create a new Object\n        for (let formElementIdentifier in this.state.orderForm) {\n            // [name, street, zipCode ...]\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId,\n        }\n\n        this.props.onBurgerOrder(order, this.props.token)\n        // post method\n    }\n\n    //* While the input changed.\n    inputChangedHandler = (event, identifer) => {\n        const updatedFormElement = updateObject(this.state.orderForm[identifer], {\n            value: event.target.value,\n            // what you key in\n            valid: checkValidity(event.target.value, this.state.orderForm[identifer].validation),\n            // check is the input empty or not.\n            touched: true,\n            // make the initial input works properly.\n        })\n\n        const updatedOrderForm = updateObject(this.state.orderForm, { [identifer]: updatedFormElement })\n\n        let formIsValid = true\n        // decide is the order bottom available or not.\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n            // if there is one input empty, formIsValid will be false, so the order bottom will not be available.\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\n    }\n\n    render() {\n        let formElementArray = []\n        for (let key in this.state.orderForm) {\n            formElementArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementArray.map((formElement) => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                        Invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n                    ORDER\n                </Button>\n            </form>\n        )\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onBurgerOrder: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))\n","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport CheckOutSummary from '../../components/Order/CheckOutSummary/CheckOutSummary'\nimport ContactData from '../CheckOut/ContactData/ContactData'\n\nclass CheckOut extends Component {\n    /* state = {\n        ingredients: null,\n        totalPrice: 0\n    }\n    \n\n    //*get the information from the query search part of url.\n    componentWillMount () {\n        const query = new URLSearchParams(this.props.location.search)\n        const ingredients = {}\n        let price = 0\n        for ( let param of query.entries() ) {  \n            // it will return arrays. [bacon, 1], [salad, 2] and so on.....\n            if ( param[0] === 'price') {\n                price = param[1]\n            } else {\n                ingredients[param[0]] = +param[1] \n                // the symbol + make the param[1] exact the number.\n            }\n        }\n        this.setState({ ingredients: ingredients, totalPrice: price })\n   } */\n\n    checkoutCanceledHandler = () => {\n        this.props.history.goBack()\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data')\n    }\n\n    render() {\n        //* avoid directly entering the path on url.\n        let summary = <Redirect to=\"/\" />\n\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckOutSummary\n                        ingredients={this.props.ings}\n                        checkoutCanceled={this.checkoutCanceledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}\n                    />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData}\n\n                        /* render = { props => (\n                        <ContactData \n                        ingredients = { this.state.ingredients } \n                        price = { this.state.totalPrice }\n                        {...props}\n                        />\n                        ) \n                    } */\n                    />\n                </div>\n            )\n        }\n\n        return summary\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased,\n    }\n}\n\nexport default connect(mapStateToProps)(CheckOut)\n","import React from 'react'\nimport classes from './Input.module.css'\n\n\nconst input = props => {\n\n    let inputElement = null\n    const inputClasses = [classes.InputElement]\n\n    if ( props.Invalid && props.shouldValidate && props.touched ) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ) :\n            inputElement = <input \n            className = { inputClasses.join(' ') } \n            value = { props.value }\n            { ...props.elementConfig } \n            onChange = { props.changed }/>\n            break\n        case ( 'textarea' ) :\n            inputElement = <textarea \n            className = { inputClasses.join(' ') }\n            value = { props.value } \n            { ...props.elementConfig } \n            onChange = { props.changed }/>\n            break   \n        case ( 'select' ) :\n            inputElement = (\n                <select\n                className = { inputClasses.join(' ') }\n                value = { props.value }\n                onChange = { props.changed }>\n                    { props.elementConfig.options.map(option => (\n                        <option \n                        value = { option.value }\n                        key = { option.value }>\n                            { option.displayValue }\n                        </option>\n                    )) }\n                </select>\n             )\n            break   \n        default : \n            inputElement = <input \n            className = { classes.InputElement }\n            value = { props.value } \n            { ...props.elementConfig } \n            onChange = { props.changed }/>\n        }   \n\n\n    return (\n        <div className = { classes.Input }>\n            <label className = {classes.Label}>{ props.label }</label>\n            { inputElement }\n        </div>\n    )\n}\n\n\nexport default input\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckOutSummary\":\"CheckOutSummary_CheckOutSummary__2srbr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1lHAP\"};"],"sourceRoot":""}